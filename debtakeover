#!/usr/bin/env bash
#
# debtakeover
#
#	Convert a new non-Debian distribution to Debian proper
#
# Copyright Â© 2003-2022 Guillem Jover <guillem@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# shellcheck disable=SC2002

set -e

#
# User modifiable variables
#

declare -a REMOVE_EXCLUDES
REMOVE_EXCLUDES+=(/etc/mtab)
REMOVE_EXCLUDES+=(/etc/fstab)
REMOVE_EXCLUDES+=(/etc/hostname)
REMOVE_EXCLUDES+=(/etc/hosts)
REMOVE_EXCLUDES+=(/etc/resolv.conf)
REMOVE_EXCLUDES+=(/etc/lilo.conf)
REMOVE_EXCLUDES+=(/etc/modules)
REMOVE_EXCLUDES+=(/etc/modules.conf)
REMOVE_EXCLUDES+=(/etc/passwd)
REMOVE_EXCLUDES+=(/etc/shadow)
REMOVE_EXCLUDES+=(/etc/group)
REMOVE_EXCLUDES+=(/etc/gshadow)
REMOVE_EXCLUDES+=(/etc/grub.conf)
REMOVE_EXCLUDES+=(/etc/ssh/ssh_host_*)
REMOVE_EXCLUDES+=(/etc/network/interfaces)

declare -a STD_EXCLUDES
STD_EXCLUDES+=(/tmp)
STD_EXCLUDES+=(/root)
STD_EXCLUDES+=(/home)
STD_EXCLUDES+=(/opt)
STD_EXCLUDES+=(/mnt)
STD_EXCLUDES+=(/media)
STD_EXCLUDES+=(/dev)
STD_EXCLUDES+=(/proc)
STD_EXCLUDES+=(/srv)
STD_EXCLUDES+=(/sys)
STD_EXCLUDES+=(/gnu)
STD_EXCLUDES+=(/nix)

declare -a STD_FIND_EXCLUDES

WORKDIR=~

#
# Function definitions
#

logpipe()
{
  if [ "$VERBOSE" = "yes" ]; then
    tee -a "$LOGFILE"
  else
    cat >> "$LOGFILE"
  fi
}

log()
{
  echo -e "$@" | logpipe
}

msg()
{
  echo -e "$@" | tee -a "$LOGFILE"
}

warning()
{
  msg "warning: $*" >&2
}

error()
{
  code="$1"
  shift
  msg "error: $*" >&2
  if [ "$code" != 0 ]; then
    exit "$code"
  fi
}

sigerror()
{
  msg "Unexpected error while executing '$BASH_COMMAND' returned $?," >&2
  msg "please report it with full logs to: $BUGS_ADDRESS" >&2
  exit 80
}

usage()
{
  cat <<HERE
Usage: $PROGRAM [options]

Options:

    --profile=string	Installation profile (default "$DEFAULT_PROFILE")
    --suite=string	Debian suite (default "$DEFAULT_SUITE")
    --mirror=url	Debian mirror (default "$DEFAULT_MIRROR")
    --tarball=file	Debian base tarball
    --debootstrap=path	Debootstrap compatible binary (default "$DEFAULT_DEBOOTSTRAP")
    --debootstrap-args=string
			Debootstrap extra arguments
    --force-purify	Force the purification (non-interactive)
    --force-retakeover	Force taking over a Debian system
    --verbose		Be more verbose
    --version		Print program version
    --help		Print this help

HERE
  exit 0
}

setup_shell()
{
  msg "Stage (Setting up the shell)"
  msg "-----"

  msg "-> Disable bash executable path hashing."
  set +h

  # Some old bash versions does not support SIGERR on errors from set -e
  if trap -p ERR >& /dev/null; then
    msg "-> Setting signal handler."
    trap sigerror ERR
  fi
}

has_prog()
{
  local prog="$1"

  command -v "$prog" >& /dev/null
}

check_needed()
{
  msg "Stage (Checking for needed components)"
  msg "-----"

  check_print() { msg -n "-> Checking for $* ... "; }

  check_print "superuser privileges"
  if [ "$EUID" = 0 ]; then
    msg "ok."
  else
    msg "failed."
    error 4 "You need superuser privileges to run this program."
  fi

  local NEWPATH=$PATH
  declare -a DEBOOTSTRAP_NEEDED
  if ! [ -s "$DEBIAN_TARBALL" ]; then
    DEBOOTSTRAP_NEEDED+=("$DEBOOTSTRAP")
    DEBOOTSTRAP_NEEDED+=(wget)
    if has_prog dpkg-deb; then
      DEBOOTSTRAP_NEEDED+=(dpkg-deb)
    else
      DEBOOTSTRAP_NEEDED+=(ar)
    fi
  fi
  declare -a DEBTAKEOVER_NEEDED
  DEBTAKEOVER_NEEDED+=(grep)
  DEBTAKEOVER_NEEDED+=(sed)
  DEBTAKEOVER_NEEDED+=(diff)
  DEBTAKEOVER_NEEDED+=(tar)
  DEBTAKEOVER_NEEDED+=(gzip)
  DEBTAKEOVER_NEEDED+=(xz)
  DEBTAKEOVER_NEEDED+=(bzip2)

  for bin in "${DEBOOTSTRAP_NEEDED[@]}" "${DEBTAKEOVER_NEEDED[@]}"; do
    check_print "$bin"
    if PATH=$NEWPATH has_prog "$bin"; then
      msg "found."
    else
      msg "missing."
      local CHECK_MISSING=yes
    fi
  done

  if [ "$CHECK_MISSING" = yes ]; then
    error 2 "Please install missing software and try again."
  fi

  if [ "$FORCE_PURIFY" != yes ]; then
    REPLY_CHECK="Yes I am"
    warning "Are you sure you want to do this? [$REPLY_CHECK]"
    read -r
    if [ "$REPLY" != "$REPLY_CHECK" ]; then
      error 20 "Ok, you are not sure. Leaving $DISTRO distro untouched."
    fi
  fi
}

distro_detect()
{
  msg "Stage (Detecting current Distro)"
  msg "-----"

  # Set default redhat style network conf dir.
  NETWORK_REDHAT_CONF_DIR=/etc/sysconfig/network-scripts

  if [ -e /etc/alpine-release ]; then
    DISTRO=alpine
  elif [ -e /etc/ark-release ]; then
    # Provides mandrake and redhat release files
    DISTRO=arklinux
  elif [ -e /etc/altlinux-release ]; then
    # Provides mandrake and redhat release files
    DISTRO=altlinux
  elif [ -e /etc/lvr-release ]; then
    DISTRO=lvr
  elif [ -e /etc/caos-release ]; then
    DISTRO=caos
  elif [ -e /etc/magic-release ]; then
    DISTRO=magiclinux
  elif [ -e /etc/asplinux-release ]; then
    # Provides redhat release file
    DISTRO=asplinux
  elif [ -e /etc/aurox-release ]; then
    # Provides redhat release file
    DISTRO=aurox
  elif [ -e /etc/engarde-release ]; then
    # Provides redhat release file
    DISTRO=engarde
  elif [ -e /etc/whitebox-release ]; then
    # Provides redhat release file
    DISTRO=whitebox
  elif [ -e /etc/pld-release ]; then
    DISTRO=pld
  elif [ -e /etc/startcom-release ]; then
    DISTRO=startcom
  elif [ -e /etc/trustix-release ]; then
    DISTRO=trustix
  elif [ -e /etc/conectiva-release ]; then
    DISTRO=conectiva
  elif [ -e /etc/mandrake-release ]; then
    DISTRO=mandrake
    NETWORK_TYPE=redhat
  elif [ -e /etc/fedora-release ]; then
    DISTRO=fedora
    NETWORK_TYPE=redhat
  elif [ -e /etc/redhat-release ]; then
    DISTRO=redhat
    NETWORK_TYPE=redhat
  elif [ -e /etc/SuSE-release ]; then
    DISTRO=suse
    NETWORK_TYPE=redhat
    # SuSE version < 8.0 used /etc/rc.config
    NETWORK_REDHAT_CONF_DIR=/etc/sysconfig/network
  elif [ -e /etc/slackware-version ]; then
    DISTRO=slackware
  elif [ -e /etc/gentoo-release ]; then
    DISTRO=gentoo
  elif [ -e /etc/cobalt-release ]; then
    DISTRO=cobalt
  elif [ -e /etc/yellowdog-release ]; then
    DISTRO=yellowdog
  elif [ -e /etc/turbolinux-release ]; then
    DISTRO=turbolinux
  elif [ -e /etc/arch-release ]; then
    DISTRO=archlinux
  elif [ -e /etc/lsb-release ]; then
    DISTRO=$(
      # shellcheck disable=SC1091
      . /etc/lsb-release

      # Normalize distro name
      echo "${DISTRIB_ID,,[A-Z]}"
    )
  fi

  if [ -e /etc/debian_version ]; then
    if [ "$DISTRO" = unknown ] || [ "$DISTRO" = debian ]; then
      if [ "$FORCE_RETAKEOVER" = yes ]; then
        DISTRO=debian
        NETWORK_TYPE=debian
        warning "Taking over a Debian system"
      else
        error 1 "You already have a Debian system"
      fi
    else
      warning "You have a mixed system, trying to continue"
      DISTRO_MIXED=yes
    fi
  fi

  msg $DISTRO
}

generic_exclusion_list()
{
  msg "Stage (Building the generic exclusion list)"
  msg "-----"

  msg "-> Generating exclusion file list"
  echo "${REMOVE_EXCLUDES[@]}" "${STD_EXCLUDES[@]}" "${DISTRO_EXCLUDES[@]}" \
    | xargs -n1 > $WORKDIR/debianize-exclude.list
  sed -e 's:^/::' $WORKDIR/debianize-exclude.list > $WORKDIR/debianize-tar-exclude.list
  for e in "${STD_EXCLUDES[@]}"; do
    STD_FIND_EXCLUDES+=(-path "$e" -prune -o)
  done

  # Be extremely paranoid
  test -s $WORKDIR/debianize-exclude.list
  test -s $WORKDIR/debianize-tar-exclude.list
}

debian_tarball_build()
{
  msg "Stage (Building the base-tarball)"
  msg "-----"

  if [ -z "$DEBIAN_DIR" ]; then
    error 2 "Internal error: the DEBIAN_DIR variable is empty."
  fi

  DEBOOTSTRAP_ARGS+=(--no-merged-usr)
  OLD_IFS=$IFS
  IFS=","
  if [ "${#DEBOOTSTRAP_INCLUDES[@]}" -gt 0 ]; then
    DEBOOTSTRAP_ARGS+=("--include=${DEBOOTSTRAP_INCLUDES[*]}")
  fi
  if [ "${#DEBOOTSTRAP_EXCLUDES[@]}" -gt 0 ]; then
    DEBOOTSTRAP_ARGS+=("--exclude=${DEBOOTSTRAP_EXCLUDES[*]}")
  fi
  IFS=$OLD_IFS

  msg "-> Debootstrapping"
  $DEBOOTSTRAP "${DEBOOTSTRAP_ARGS[@]}" \
        "$DEBIAN_VERSION" "$DEBIAN_DIR" "$DEBIAN_MIRROR/debian" 2>&1 | logpipe

  msg "-> Checking chroot sanity"
  for d in "${DEBOOTSTRAP_CHECK_DIRS[@]}"; do
    [ -d "$DEBIAN_DIR$d" ] || error 2 "Bad chroot, clean, correct, and try again."
  done

  msg "-> Removing unneeded files"
  rm -f "${DEBIAN_DIR:?}"/var/lib/apt/lists/*_{Sources,Packages,Release}
  rm -f "${DEBIAN_DIR:?}"/var/cache/apt/{*.bin,archives/*.deb}
  rm -rf "${DEBIAN_DIR:?}"/dev

  msg "-> Setting up APT sources"
  cat > "${DEBIAN_DIR:?}"/etc/apt/debian.sources <<-EOF
# Debian
Types: deb deb-src
URIs: $DEBIAN_MIRROR/debian
Suites: $DEBIAN_VERSION
Components: main
Signed-by: /usr/share/keyrings/debian-archive-keyring.gpg

# Debian security
Types: deb deb-src
URIs: $DEBIAN_MIRROR/debian-security
Suites: $DEBIAN_VERSION-security
Components: main
Signed-by: /usr/share/keyrings/debian-archive-keyring.gpg

# vim: syn=debcontrol
EOF

  msg "-> Generating Debian files list"
  chroot "$DEBIAN_DIR" find / "${STD_FIND_EXCLUDES[@]}" -print \
    | sort > $WORKDIR/debianize-debian.list

  # Be extremely paranoid
  test -s $WORKDIR/debianize-debian.list

  msg "-> Packaging Debian chroot"
  ( cd "$DEBIAN_DIR"; \
    tar cf "$DEBIAN_TARBALL" "$DEBIAN_TARBALL_COMPRESSOR" -- * )

  msg "-> Cleaning Debian chroot"
  rm -rf "${DEBIAN_DIR:?}"
}

debian_tarball_prebuilt()
{
  msg "Stage (Setting up pre-built base-tarball)"
  msg "-----"

  msg "-> Generating Debian files list from pre-built tarball"
  tar tf "$DEBIAN_TARBALL" "$DEBIAN_TARBALL_COMPRESSOR" \
    | sort | sed -e 's,^,/,' > $WORKDIR/debianize-debian.list

  # Be extremely paranoid
  test -s $WORKDIR/debianize-debian.list
}

distro_remove_list()
{
  msg "Stage (Building the remove list)"
  msg "-----"

  msg "-> Generating $DISTRO distro files list"
  find / \
    "${STD_FIND_EXCLUDES[@]}" \
    -path '/boot' -prune -o \
    -path '/var/run' -prune -o \
    -path '/var/log' -prune -o \
    -path '/var/local' -prune -o \
    -path '/usr/local' -prune -o \
    -path '/usr/src' -prune -o \
    -path '/lib/modules' -prune -o \
    -print | sort > $WORKDIR/debianize-$DISTRO.list

  # Be extremely paranoid
  test -s $WORKDIR/debianize-$DISTRO.list

  msg "-> Generating $DISTRO distro files removal list"
  diff -u $WORKDIR/debianize-$DISTRO.list $WORKDIR/debianize-debian.list \
    | tail -n +2 | grep '^-' | sed -e 's,^-,,' \
    | grep -vxf $WORKDIR/debianize-exclude.list > $WORKDIR/debianize-remove.list
}

setup_network_debian()
{
  msg "-> Keeping Debian network config" >&2
}

setup_network_redhat()
{
  if [ -f /etc/sysconfig/network ]; then
    # shellcheck disable=SC1091
    . /etc/sysconfig/network
  fi

  for f in "$NETWORK_REDHAT_CONF_DIR"/ifcfg-*; do
    unset DEVICE BROADCAST BOOTPROTO IPADDR NETMASK NETWORK ONBOOT || true

    # shellcheck disable=SC1090,SC1091
    . "$f"

    if [ "$ONBOOT" = yes ] || [ "$STARTMODE" = onboot ]; then
      echo "auto $DEVICE"
    fi
    if [ "$DEVICE" = lo ] || [ "$NAME" = loopback ]; then
      NET_METHOD=loopback
    elif [ -z "$BOOTPROTO" ] ||[ "$BOOTPROTO" = static ] || [ "$BOOTPROTO" = none ]; then
      NET_METHOD=static
    else
      NET_METHOD=$BOOTPROTO
    fi
    echo "iface $DEVICE inet $NET_METHOD"
    if [ "$NET_METHOD" = static ]; then
      [ -n "$IPADDR" ] && echo "  address $IPADDR"
      [ -n "$BROADCAST" ] && echo "  broadcast $BROADCAST"
      [ -n "$NETMASK" ] && echo "  netmask $NETMASK"
      [ -n "$NETWORK" ] && echo "  network $NETWORK"
      [ -n "$GATEWAY" ] && echo "  gateway $GATEWAY"
    fi
    echo
  done
}

setup_network_gentoo()
{
  warning "Distro $DISTRO has incomplete network conversion support."
  local line

  # shellcheck disable=SC2034
  cat /etc/conf.d/net | grep -v '^ *#' | while read -r line
  do
    :
  done
}

setup_network_bsd()
{
  warning "Distro $DISTRO has incomplete network conversion support."
  # /etc/rc.d/rc.inet1
  :
}

setup_network_none()
{
  warning "Distro $DISTRO does not have yet a network conversion scripts."
}

debian_preconfigure()
{
  msg "Stage (PreConfiguring)"
  msg "-----"

  msg "-> Preserving $DISTRO distro network configuration"
  mkdir -p /etc/network
  setup_network_${NETWORK_TYPE} > /etc/network/interfaces
  if [ ! -f /etc/hostname ]; then
    hostname -s > /etc/hostname
  fi

  msg "-> Preserving $DISTRO distro module configuration"
  mkdir -p /etc/modutils
  if [ -f /etc/conf.modules ]; then
    cat /etc/conf.modules >> /etc/modutils/$DISTRO
  fi
  if [ -f /etc/modules.conf ] &&
       ! grep update-modules /etc/modules.conf &> /dev/null; then
    cat /etc/modules.conf >> /etc/modutils/$DISTRO
  fi
}

debian_configure()
{
  msg "Stage (Configuring)"
  msg "-----"

  msg "-> Sanitizing user databases"
  update-passwd

  if has_prog update-inetd; then
    msg "-> Disabling unneeded network services"
    update-inetd --multi --disable discard,daytime,time
  fi

  if [ "$DEBTAKEOVER_PROFILE" = colo ]; then
    msg "-> Setting up specific colo configurations"
    # TODO: Add a kernel paramater "panic=30"

    # FIXME: Add support for other init systems.
    if [ -f /etc/default/rcS ]; then
      sed -e 's/^FSCKFIX=no/FSCKFIX=yes/;s/^TMPTIME=0/TMPTIME=15/' \
        < /etc/default/rcS > /tmp/rcS && mv -f /tmp/rcS /etc/default/
    fi

    local has_halt=false
    local has_reboot=false
    for f in /etc/rc0.d/S??halt; do
      has_halt=true
    done
    for f in /etc/rc6.d/S??reboot; do
      has_reboot=true
    done
    if $has_halt && $has_reboot; then
      msg "-> Converting halt to behave as reboot"
      rm -f /etc/rc0.d/S??halt
      cp -fd /etc/rc6.d/S??reboot /etc/rc0.d
    fi
  fi

  msg "-> Setting up module configurations"
  if [ ! -f /etc/modules ]; then
    touch /etc/modules
  fi

  msg "-> Setting up remaining configurations"
  ## FIXME: missing updates dir (and apt partial dirs)
  dpkg --configure -a

  if ! grep '# Begin:.*debtakeover' ~/.bash_profile &> /dev/null; then
    msg "-> Sanitizing root PATH environment variable"
    cat >> ~/.bash_profile <<-EOF
	# Begin: automatically added by debtakeover
	PATH=/sbin:/usr/sbin:/usr/local/sbin:\$PATH
	# End
EOF
  fi
}

debian_dump()
{
  msg "Stage (Dump the tarball)"
  msg "-----"

  cd /

  msg "-> Making backups of important data"
  tar czvf $WORKDIR/$DISTRO-etc.tgz /etc 2>&1 | logpipe
  tar czvf $WORKDIR/$DISTRO-log.tgz /var/log 2>&1 | logpipe

  msg "-> Removing symlinks to directories"
  find / "${STD_FIND_EXCLUDES[@]}" -type l -xtype d -print0 | xargs -0 rm -f || true

  msg "-> Dumping Debian over $DISTRO distro"
  tar xvf "$DEBIAN_TARBALL" "$DEBIAN_TARBALL_COMPRESSOR" --numeric-owner \
    -p -U -X $WORKDIR/debianize-tar-exclude.list 2>&1 | logpipe || true
  ldconfig
  msg "-> Linker configuration regenerating"
}

distro_trash()
{
  msg "Stage (Trash the old system)"
  msg "-----"

  msg "-> Removing remaining $DISTRO distro files"
  cat $WORKDIR/debianize-remove.list | xargs rm -f 2> /dev/null \
    | ( ldconfig; logpipe ) || true

  msg "-> Regenerating linker configuration"
  ldconfig

  msg "-> Removing remaining $DISTRO distro directories"
  cat $WORKDIR/debianize-remove.list | sort -r | xargs rmdir 2> /dev/null \
    | ( ldconfig; logpipe ) || true
}


#
# Main program
#

export LC_ALL=C

PROGRAM=debtakeover
VERSION=0.8
BUGS_ADDRESS="Guillem Jover <guillem@debian.org>"

DEFAULT_MIRROR=https://deb.debian.org
DEFAULT_SUITE=bullseye
DEFAULT_PROFILE=colo
DEFAULT_DEBOOTSTRAP=debootstrap

# Process command line arguments

for arg do
  arg_value="${arg//--[^= ]*=/}"
  if echo "$arg" | grep -- '--[^= ]*=' >& /dev/null && [ -z "$arg_value" ]; then
    error 8 "Missing option value for '$arg'."
  fi
  case $arg in
    --verbose)
      VERBOSE=yes
      ;;
    --profile=*)
      PROFILE=$arg_value
      ;;
    --mirror=*)
      MIRROR=$arg_value
      ;;
    --suite=*)
      SUITE=$arg_value
      ;;
    --tarball=*)
      TARBALL=$arg_value
      TARBALL_DIR="$(dirname "$TARBALL")"
      if [ "${TARBALL_DIR:0:1}" = / ]; then
        TARBALL="$(pwd)/$TARBALL"
      fi
      if [ ! -e "$TARBALL" ]; then
	error 11 "Tarball does not exist."
      fi
      case "$TARBALL" in
	*.tar.gz|*.tgz)
	  TARBALL_COMPRESSOR=--gzip
	;;
	*.tar.xz|*.txz)
	  TARBALL_COMPRESSOR=--xz
	;;
	*.tar.bz2)
	  TARBALL_COMPRESSOR=--bzip2
	;;
	*.tar.Z|*.taz)
	  TARBALL_COMPRESSOR=--compress
	;;
	*)
	  error 10 "Tarball extension not recognized."
	;;
      esac
      ;;
    --debootstrap=*)
      USER_DEBOOTSTRAP=$arg_value
      ;;
    --debootstrap-args=*)
      mapfile -t USER_DEBOOTSTRAP_ARGS <<<"$arg_value"
      ;;
    --force-purify)
      FORCE_PURIFY=yes
      ;;
    --force-retakeover)
      FORCE_RETAKEOVER=yes
      ;;
    --version)
      echo "$PROGRAM $VERSION"
      exit 0
      ;;
    --help)
      usage
      ;;
    *)
      error 0 "Unrecognized '$arg' option or value for option not specified."
      usage
      ;;
  esac
  shift
done

# Initialize some variables

LOGFILE=$WORKDIR/$PROGRAM.log

DISTRO=unknown
DISTRO_MIXED=no
NETWORK_TYPE=none

DEBIAN_MIRROR="${MIRROR:-$DEFAULT_MIRROR}"
DEBIAN_VERSION="${SUITE:-$DEFAULT_SUITE}"
DEBIAN_TARBALL="${TARBALL:-$WORKDIR/debian-$DEBIAN_VERSION.tar.xz}"
DEBIAN_TARBALL_COMPRESSOR="${TARBALL_COMPRESSOR:---xz}"
DEBIAN_DIR="debian-$DEBIAN_VERSION-chroot"

DEBTAKEOVER_PROFILE="${PROFILE:-$DEFAULT_PROFILE}"

declare -a DEBOOTSTRAP_ARGS
declare -a DEBOOTSTRAP_CHECK_DIRS
declare -a DEBOOTSTRAP_INCLUDES
declare -a DEBOOTSTRAP_EXCLUDES

DEBOOTSTRAP="${USER_DEBOOTSTRAP:-$DEFAULT_DEBOOTSTRAP}"
DEBOOTSTRAP_ARGS=("${USER_DEBOOTSTRAP_ARGS[@]}")
DEBOOTSTRAP_CHECK_DIRS+=(/etc/apt)
DEBOOTSTRAP_CHECK_DIRS+=(/bin)
DEBOOTSTRAP_CHECK_DIRS+=(/sbin)
DEBOOTSTRAP_CHECK_DIRS+=(/dev)
DEBOOTSTRAP_CHECK_DIRS+=(/var/lib/dpkg/info)
DEBOOTSTRAP_CHECK_DIRS+=(/var/lib/apt/lists)
DEBOOTSTRAP_CHECK_DIRS+=(/var/cache/apt)
DEBOOTSTRAP_INCLUDES+=(ssh)
if [ -d /sys/firmware/efi ]; then
  # If UEFI looks available, default to that.
  DEBOOTSTRAP_INCLUDES+=(grub-efi)
else
  # Otherwise, let the metapackage select the appropriate GRUB variant.
  DEBOOTSTRAP_INCLUDES+=(grub2)
fi
DEBOOTSTRAP_INCLUDES+=(xz-utils)
DEBOOTSTRAP_INCLUDES+=(bzip2)

# Impure non-Debian system

log "-> $PROGRAM started on $(date -Iseconds | tr 'T' ' ')"
msg "-> Running $PROGRAM $VERSION"

setup_shell

distro_detect
check_needed

generic_exclusion_list
if [ -s "$DEBIAN_TARBALL" ]; then
  debian_tarball_prebuilt
else
  debian_tarball_build
fi
distro_remove_list

if [ "$DISTRO_MIXED" = no ]; then
  debian_dump
fi

# Mixed system

debian_preconfigure
distro_trash

# Pure Debian system

debian_configure

msg "Congratulations, you have now a Debian $DEBIAN_VERSION system !"
log "-> $PROGRAM finished on $(date -Iseconds | tr 'T' ' ')"

exit 0
