#!/bin/sh -e
#
# debtakeover
#
# Convert a new non-Debian distribution to Debian proper
#
# $Id: debtakeover,v 1.11 2003/10/26 22:30:28 guillem Exp $
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
#

if test $# = 0
then
  echo "usage: $0 <suite> <options>"
  exit
fi

DEBIAN_MIRROR=http://ftp.no.debian.org
DEBIAN_VERSION=$1
DEBIAN_TARBALL=$DEBIAN_VERSION-tarball
DEBIAN_DIR=$DEBIAN_VERSION-chroot
shift

if [ "$1" = "--chroot" ]
then
  SETUP_CHROOT=yes
  shift
fi

ETC_EXCLUDES="mtab fstab hostname hosts resolv.conf lilo.conf modules
        modules.conf ssh/ssh_host_*"

DEBOOTSTRAP=./debootstrap
DEBOOTSTRAP_INCLUDES="ssh,grub,libssl0.9.6,zlib1g"
if [ "$DEBTAKEOVER_PROFILE" = "colo"  ]; then
  DEBOOTSTRAP_EXCLUDES="setserial,fdutils,ipchains,pcmcia-cs,ppp,pppconfig,\
pppoe,pppoeconf"
else
  DEBOOTSTRAP_EXCLUDES=""
fi

DISTRO=unknown

setup_chroot()
{
  mount /proc

  sed -e 's/^FSCKFIX=no/FSCKFIX=yes/;s/^TMPTIME=0/TMPTIME=15/' \
    < /etc/defaults/rcS > /tmp/rcS && mv -f /tmp/rcS /etc/defaults/

  for f in $ETC_EXCLUDES; do
    rm -f /etc/$f
  done

  rm -f /var/lib/apt/lists/*_{Sources,Packages,Release}
  rm -f /var/cache/apt/{*.bin,archives/*.deb}

  if [ "$DEBTAKEOVER_PROFILE" = "colo"  ]; then
    mv -f /sbin/halt /sbin/reboot
    rm /etc/rc0.d/S90halt
    rm /etc/rc1.d/*
    cp /etc/rc6.d/S90reboot /etc/rc0.d
    cp /etc/rc2.d/* /etc/rc1.d

    rmdir /cdrom /floppy
  fi

  dpkg-reconfigure -s base-passwd passwd

  rm -rf /dev
  update-inetd --multi --disable discard,daytime,time

  umount /proc

  exit 0
}

distro_detect()
{
  echo "Stage (Detecting current Distro)"
  echo "-----"

  if [ -e /etc/debian_version ]
  then
    echo "You already have a Debian system"
    exit 1
  elif [ -e /etc/slackware-version ]
  then
    DISTRO=slackware
    exit 0
  elif [ -e /etc/mandrake-release ]
  then
    DISTRO=redhat
  elif [ -e /etc/redhat-release ]
  then
    DISTRO=redhat
  elif [ -e /etc/SuSe-release ]
  then
    DISTRO=redhat
  elif [ -e /etc/gentoo-release ]
  then
    DISTRO=gentoo
    exit 0
  elif [ -e /etc/cobalt-release ]
  then
    DISTRO=cobalt
    exit 0
  fi

  echo $DISTRO
}


debian_tarball()
{
  echo "Stage (Building the base-tarball)"
  echo "-----"

  $DEBOOTSTRAP --include="$DEBOOTSTRAP_INCLUDES" \
    --exclude="$DEBOOTSTRAP_EXCLUDES" \
        $DEBIAN_VERSION $DEBIAN_DIR $DEBIAN_MIRROR/debian

  echo "-> setting up the Debian chroot"

  cat > $DEBIAN_DIR/etc/apt/sources.list <<-EOF
  deb $DEBIAN_MIRROR/ $DEBIAN_VERSION/updates main
  deb $DEBIAN_MIRROR/debian $DEBIAN_VERSION main
  deb $DEBIAN_MIRROR/debian-non-US $DEBIAN_VERSION/non-US main

  deb-src $DEBIAN_MIRROR/ $DEBIAN_VERSION/updates main
  deb-src $DEBIAN_MIRROR/debian $DEBIAN_VERSION main
  deb-src $DEBIAN_MIRROR/debian-non-US $DEBIAN_VERSION/non-US main
EOF

  cp $0 $DEBIAN_DIR/tmp/
  chroot $DEBIAN_DIR/ /tmp/`basename $0` $DEBIAN_VERSION --chroot

  echo "-> packaging Debian chroot"
  ( cd $DEBIAN_DIR; tar cf ../$DEBIAN_TARBALL.tar.bz2 --bzip2 * )

  echo "-> generating Debian files list"
  ( cd $DEBIAN_DIR; \
    find . \
      -path '/dev' -prune \
      -o -path '/proc' -prune \
      -o -print ) | sed -e 's,^\.,,' | sort > debianize-debian.list

  echo "-> cleaning Debian chroot"
  rm -rf $DEBIAN_DIR
}

distro_remove_list()
{
  echo "Stage (Building the remove list)"
  echo "-----"

  find / \
    -path '/boot' -prune \
    -o -path '/tmp' -prune \
    -o -path '/dev' -prune \
    -o -path '/proc' -prune \
    -o -path '/root' -prune \
    -o -path '/home' -prune \
    -o -path '/var/run' -prune \
    -o -path '/var/log' -prune \
    -o -path '/var/local' -prune \
    -o -path '/usr/local' -prune \
    -o -path '/lib/modules' -prune \
    -o -print | sort > ~/debianize-$DISTRO.list
  diff -u debianize-$DISTRO.list debianize-debian.list | tail +2 | \
    grep '^-' | sed -e 's,^-,,' > debianize-remove.list
}

setup_network_redhat()
{
  . /etc/sysconfig/network

  for f in /etc/sysconfig/network-scripts/ifcfg-*; do
    unset DEVICE BROADCAST BOOTPROTO IPADDR NETMASK NETWORK ONBOOT

    . $f

    if [ "$ONBOOT" = "yes"  ]; then
      echo "auto $DEVICE"
    fi
    echo "iface $DEVICE inet $BOOTPROTO"
    if [ -z "$IPADDR" ]; then
      echo "  address $IPADDR"
    fi
    if [ -z "$BRADCAST" ]; then
      echo "  broadcast $BROADCAST"
    fi
    if [ -z "$NETMASK" ]; then
      echo "  netmask $NETMASK"
    fi
    if [ -z "$NETWORK" ]; then
      echo "  network $NETWORK"
    fi
    echo "  gateway $GATEWAY"
    echo ""
    echo
  done
}

setup_network_gentoo()
{
  cat /etc/conf.d/net | grep -v '^ *#' | while read line
  do
    echo dho!
  done
}

setup_network_unknown()
{
  echo "warning: unknwown distrodistro $DISTRO does not have network conversion scripts."
}

setup_network()
{
  echo "Stage (Setting up network)"
  echo "-----"

  setup_network_${DISTRO}
}

debian_configure()
{
  echo "Stage (Configuring)"
  echo "-----"

  setup_network > /etc/network/interfaces

  passwd

  # TODO: Add a kernel paramater "panic=30"
  dpkg --configure -a
  update-modules
}

debian_dump()
{
  echo "Stage (Dump the tarball)"
  echo "-----"

  cd /

  echo "-> making backups of important data"
  tar czvf ~/$DISTRO-etc.tgz /etc
  tar czvf ~/$DISTRO-log.tgz /var/log

  echo "-> dumping Debian over $DISTRO"
  tar xvf ~/$DEBIAN_TARBALL.tar.bz2 --bzip2 -p -U --numeric-owner

  ldconfig
  hash -r
}

distro_trash()
{
  echo "Stage (Trash the old system)"
  echo "-----"

  cat ~/debianize-remove.list | xargs rm -f
  cat ~/debianize-remove.list | xargs rmdir -p
  hash -r
  echo "!!! DANGER WILL ROBINSON !!!"
  echo "reboot when done"
#  reboot
}

export LC_ALL=C

if [ "$SETUP_CHROOT" = "yes" ]; then
  setup_chroot
  exit 0
fi

# Pure non-Debian system
distro_detect
debian_tarball
distro_remove_list
debian_dump
# Mixed system
debian_configure
distro_trash
# Pure Debian system

exit 0

