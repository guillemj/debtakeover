#!/bin/bash -e
#
# debtakeover
#
# $Id: debtakeover,v 1.44 2003/11/06 11:12:04 guillem Exp $
#
#	Convert a new non-Debian distribution to Debian proper
#
# Copyright (C) 2003 Guillem Jover <guillem@debian.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
#


#
# User modifiable variables
#

REMOVE_EXCLUDES="/etc/mtab /etc/fstab /etc/hostname /etc/hosts
        /etc/resolv.conf /etc/lilo.conf /etc/modules /etc/modules.conf
        /etc/passwd /etc/shadow /etc/group /etc/gshadow
        /etc/ssh/ssh_host_*"

DEBOOTSTRAP=./debootstrap
DEBOOTSTRAP_INCLUDES="ssh,grub,libssl0.9.6,zlib1g"
if [ "$DEBTAKEOVER_PROFILE" = "colo"  ]; then
  DEBOOTSTRAP_EXCLUDES="setserial,fdutils,ipchains,pcmcia-cs,ppp,pppconfig,\
pppoe,pppoeconf"
else
  DEBOOTSTRAP_EXCLUDES=""
fi


#
# Function definitions
#

logpipe()
{
  if [ "$VERBOSE" = "yes" ]; then
    tee -a $LOGFILE
  else
    cat >> $LOGFILE
  fi
}

log()
{
  echo -e "$@" | logpipe
}

warning()
{
  echo -e "warning: $@" >&2
}

error()
{
  code=$1
  shift
  echo -e "error: $@" >&2
  if [ $code != 0 ]; then
    exit $code
  fi
}

usage()
{
  echo "usage: $PROGRAM <options>"
  echo "    --profile=string	(default '$DEFAULT_PROFILE')"
  echo "    --suite=string	(default '$DEFAULT_SUITE')"
  echo "    --mirror=url	(default '$DEFAULT_MIRROR')"
  echo "    --verbose"
  echo "    --version"
  echo "    --help"
  exit 0
}

check_needed()
{
  echo "Stage (Checking for needed components)"
  echo "-----"

  check_print() { echo -n "-> Checking for $@ ... "; }

  check_print "superuser privileges"
  if [ `id -u` = 0 ]; then
    echo "ok."
  else
    echo "failed."
    error 4 "You need superuser privileges to run this program."
  fi

  local DEBOOTSTRAP_NEEDED="wget ar"
  local DEBTAKEOVER_NEEDED="grep sed diff tar gzip bzip2"

  for bin in $DEBOOTSTRAP $DEBOOTSTRAP_NEEDED $DEBTAKEOVER_NEEDED; do
    check_print "$bin"
    if which $bin >& /dev/null; then
      echo "found."
    else
      echo "missing."
      local CHECK_MISSING=yes
    fi
  done

  if [ "$CHECK_MISSING" = yes ]; then
    error 2 "Please install missing software and try again."
  fi
}

distro_detect()
{
  echo "Stage (Detecting current Distro)"
  echo "-----"

  if [ -e /etc/redhat-release -o -e /etc/mandrake-release -o \
         -e /etc/SuSe-release ]
  then
    DISTRO=redhat
  elif [ -e /etc/slackware-version ]
  then
    DISTRO=slackware
    error 3 "Slackware not supported yet."
  elif [ -e /etc/gentoo-release ]
  then
    DISTRO=gentoo
    error 3 "Gentoo not supported yet."
  elif [ -e /etc/cobalt-release ]
  then
    DISTRO=cobalt
    error 3 "Cobalt not supported yet."
  fi

  if [ -e /etc/debian_version ]
  then
    if [ "$DISTRO" = "unknown" ]; then
      error 1 "You already have a Debian system"
    else
      warning "You have a mixed system, trying to continue"
      DISTRO_MIXED=yes
    fi
  fi

  echo $DISTRO
}


debian_tarball()
{
  echo "Stage (Building the base-tarball)"
  echo "-----"

  echo "-> Debootstrapping"
  $DEBOOTSTRAP --include="$DEBOOTSTRAP_INCLUDES" \
    --exclude="$DEBOOTSTRAP_EXCLUDES" \
        $DEBIAN_VERSION $DEBIAN_DIR $DEBIAN_MIRROR/debian 2>&1 | logpipe

  echo "-> Removing unneeded files"
  rm -f $DEBIAN_DIR/var/lib/apt/lists/*_{Sources,Packages,Release}
  rm -f $DEBIAN_DIR/var/cache/apt/{*.bin,archives/*.deb}
  rm -rf $DEBIAN_DIR/dev

  echo "-> Setting up APT sources.list"
  cat > $DEBIAN_DIR/etc/apt/sources.list <<-EOF
  deb $DEBIAN_MIRROR/ $DEBIAN_VERSION/updates main
  deb $DEBIAN_MIRROR/debian $DEBIAN_VERSION main
  deb $DEBIAN_MIRROR/debian-non-US $DEBIAN_VERSION/non-US main

  deb-src $DEBIAN_MIRROR/ $DEBIAN_VERSION/updates main
  deb-src $DEBIAN_MIRROR/debian $DEBIAN_VERSION main
  deb-src $DEBIAN_MIRROR/debian-non-US $DEBIAN_VERSION/non-US main
EOF

  echo "-> Generating exclusion file list"
  ( for f in ${REMOVE_EXCLUDES}; do
    echo $f
  done ) > ~/debianize-exclude.list

  echo "-> Generating Debian files list"
  ( cd $DEBIAN_DIR; \
    find . \
      -path '/dev' -prune \
      -o -path '/proc' -prune \
      -o -print ) | sed -e 's,^\.,,' | sort > ~/debianize-debian.list

  echo "-> Packaging Debian chroot"
  ( cd $DEBIAN_DIR; \
    tar cf ~/$DEBIAN_TARBALL.tar.bz2 --bzip2 -X ~/debianize-exclude.list * )

  echo "-> Cleaning Debian chroot"
  rm -rf $DEBIAN_DIR
}

distro_remove_list()
{
  echo "Stage (Building the remove list)"
  echo "-----"

  echo "-> Generating distro files list"
  find / \
    -path '/boot' -prune \
    -o -path '/tmp' -prune \
    -o -path '/dev' -prune \
    -o -path '/proc' -prune \
    -o -path '/root' -prune \
    -o -path '/home' -prune \
    -o -path '/var/run' -prune \
    -o -path '/var/log' -prune \
    -o -path '/var/local' -prune \
    -o -path '/usr/local' -prune \
    -o -path '/lib/modules' -prune \
    -o -print | sort > ~/debianize-$DISTRO.list

  echo "-> Generating distro files removal list"
  diff -u ~/debianize-$DISTRO.list ~/debianize-debian.list | tail +2 | \
    grep '^-' | sed -e 's,^-,,' | grep -vxf ~/debianize-exclude.list \
    > ~/debianize-remove.list
}

setup_network_redhat()
{
  if [ -f /etc/sysconfig/network ]; then
    . /etc/sysconfig/network
  fi

  for f in /etc/sysconfig/networking/ifcfg-*; do
    unset DEVICE BROADCAST BOOTPROTO IPADDR NETMASK NETWORK ONBOOT GATEWAY \
      || true

    . $f

    [ "$ONBOOT" = "yes"  ] && echo "auto $DEVICE"
    [ -n "$BOOTPROTO" ] && BOOTPROTO=static
    echo "iface $DEVICE inet $BOOTPROTO"
    [ -n "$IPADDR" ] && echo "  address $IPADDR"
    [ -n "$BRADCAST" ] && echo "  broadcast $BROADCAST"
    [ -n "$NETMASK" ] && echo "  netmask $NETMASK"
    [ -n "$NETWORK" ] && echo "  network $NETWORK"
    [ -n "$GATEWAY" ] && echo "  gateway $GATEWAY"
    echo
  done
}

setup_network_gentoo()
{
  cat /etc/conf.d/net | grep -v '^ *#' | while read line
  do
    warning "Gentoo does not have yet a network conversion script."
  done
}

setup_network_unknown()
{
  warning "Unknwown distro, does not have network conversion scripts."
}

debian_configure()
{
  echo "Stage (Configuring)"
  echo "-----"

  echo "-> Setting up network"
  setup_network_${DISTRO} > /etc/network/interfaces
  if [ ! -f /etc/hostname ]; then
    hostname -s > /etc/hostname
  fi
  update-inetd --multi --disable discard,daytime,time

  if [ "$DEBTAKEOVER_PROFILE" = "colo"  ]; then
    echo "-> Setting up specific colo configurations"
    # TODO: Add a kernel paramater "panic=30"

    sed -e 's/^FSCKFIX=no/FSCKFIX=yes/;s/^TMPTIME=0/TMPTIME=15/' \
      < /etc/defaults/rcS > /tmp/rcS && mv -f /tmp/rcS /etc/defaults/

    mv -f /sbin/halt /sbin/halt.disabled
    rm /etc/rc0.d/S??halt
    cp /etc/rc6.d/S??reboot /etc/rc0.d
    mv -f /etc/rc1.d /etc/rc1.d.disabled
    ln -s /etc/rc2.d /etc/rc1.d

    rmdir /cdrom /floppy
  fi

  echo "-> Sanitizing user databases"
  update-passwd

  echo "-> Setting up module configurations"
  if [ -f /etc/conf.modules ]; then
    cat /etc/conf.modules >> /etc/modutils/$DISTRO
  fi
  if [ -f /etc/modules.conf ]; then
    cat /etc/modules.conf >> /etc/modutils/$DISTRO
  fi
  update-modules

  echo "-> Setting up remaining configurations"
  dpkg --configure -a
}

debian_dump()
{
  echo "Stage (Dump the tarball)"
  echo "-----"

  cd /

  echo "-> Making backups of important data"
  tar czvf ~/$DISTRO-etc.tgz /etc 2>&1 | logpipe
  tar czvf ~/$DISTRO-log.tgz /var/log 2>&1 | logpipe

  echo "-> Removing symlinks to directories"
  find -type l -xtype d | xargs rm -f

  echo "-> Dumping Debian over $DISTRO"
  tar xvf ~/$DEBIAN_TARBALL.tar.bz2 --bzip2 -p -U --numeric-owner 2>&1 \
    | logpipe || true

  hash -r
  ldconfig
}

distro_trash()
{
  echo "Stage (Trash the old system)"
  echo "-----"

  cat ~/debianize-remove.list | xargs rm -f 2> /dev/null | logpipe || true
  cat ~/debianize-remove.list | xargs rmdir -p 2> /dev/null | logpipe || true

  hash -r
}


#
# Main program
#

export LC_ALL=C

PROGRAM=debtakeover
VERSION=0.2

DEFAULT_MIRROR=http://ftp.no.debian.org
DEFAULT_SUITE=woody
DEFAULT_PROFILE=colo

# Process command line arguments

for args do
  case $args in
    --verbose)
      VERBOSE=yes
      ;;
    --profile=*)
      PROFILE=`echo $1 | sed 's/--profile=//'`
      ;;
    --mirror=*)
      MIRROR=`echo $1 | sed 's/--mirror=//'`
      ;;
    --suite=*)
      SUITE=`echo $1 | sed 's/--suite=//'`
      ;;
    --version)
      echo "$PROGRAM $VERSION"
      exit 0
      ;;
    --help)
      usage
      ;;
    *)
      error 0 "Unrecognized options."
      usage
      ;;
  esac
  shift
done

# Initialize some variables

LOGFILE=$PROGRAM.log

DISTRO=unknown
DISTRO_MIXED=no

DEBIAN_MIRROR=${MIRROR:-$DEFAULT_MIRROR}
DEBIAN_VERSION=${SUITE:-$DEFAULT_SUITE}
DEBIAN_TARBALL=$DEBIAN_VERSION-tarball
DEBIAN_DIR=$DEBIAN_VERSION-chroot

DEBTAKEOVER_PROFILE=${PROFILE:-$DEFAULT_PROFILE}

# Impure non-Debian system

check_needed
distro_detect

if [ "$DISTRO_MIXED" = "no" ]; then
  debian_tarball
  distro_remove_list
  debian_dump
fi

# Mixed system

debian_configure
distro_trash

# Pure Debian system
echo "Congratulations, you have now a Debian $DEBIAN_VERSION system !"

exit 0

